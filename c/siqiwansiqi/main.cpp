/*
 * 包含头文件，就是向别人家借工具箱
 */
#include <stdio.h>
#include <iostream>
#include "string.h"

/*
 * 1. 课程范围："c++ primer"第4版第1.1节
 * 2. 课后练习：
 *    a) 读懂注释：向别人讲述自己的理解
 *    b) 编译程序：g++ main.cpp -o main
 *    c) 查看结果：ll main*（注意文件权限的不同）
 *    d) 无参执行：./main         && echo $?
 *    e) 正确执行：./main success && echo $?
 *    f) 异常执行：./main failed  && echo $?
 *    g) 思考问题：解释不同运行状态的原因
 */

/*
 * 1. 研表究明，汉字的序顺并不定一能影阅响读，比如当你看完这句话后，才发这现里的字全是都乱的。
 * 2. 机器的智慧与人类无法比拟，与机器沟通需要我们执行严格的语法。
 *    a）练习：试着不按规矩办事（去掉一个括号、分号，增加一些无关的代码，看看程序如何罢工的）
 * 3. 函数四要素（以买火车票为例）
 *    a) 函数名：我提供了什么功能？（买票）
 *    b) 形式参数表（形参）：如果要调用我，那么必须给我提供什么材料。（身份证、钱）
 *    c）函数体：功能执行（扫描身份证、选定车次、选定车票、收取票钱、打印、出票……）
 *    d) 返回值
 *       i) 正常返回，0（意味着购票成功）；非正常返回，错误号（身份证有犯罪记录-1、车票售完-2……）
 *       ii) 交付结果（车票+证件）；交付异常值（退回证件+钱）
 * 4. main函数的特别之处
 *    a）调用main的boss是操作系统（上达天听，是不是非常厉害？）
 *    b）是所有可执行程序的唯一入口（享受专宠，是不是非常厉害？）
 * 5. 关于argc
 *    a) 表示操作系统给了多少个参数；
 *    b) 可执行文件名，如"./main"算一个参数；
 * 6. 关于argv
 *    a) 操作系统输入的参数列表
 *    b) argv[0]是可执行程序，如"./main"
 *    c) argv[1]是第一个参数
 *    d) 本质是一个二维数组
 * 7. 关于返回值
 *    a) 无论何时返回，一定要明确给出返回值（及时、无歧义汇报是一个非常好的习惯）；
 *    b) 现行版本编译器貌似默认返回0（正常执行的返回值），但依赖默认返回值就是自己坑自己（好事是死有葬身之地）
 */
int main(int argc, char* argv[])
{
	/*
	 * 关于缩进
	 *   1. 在c/c++中，缩进是为了美观；
	 *   2. 在python等语言中，缩进就是语法的一部分
	 *   3. 在c/c++中，良心工程师会做到：相同的代码块儿，具有相同的缩进；
	 * 关于大括号
	 *   1. 表示一个代码范围
	 *   2. 单语句不用大括号，但非常建议使用大括号（一些不大酷炫的习惯会使自己一生平安）
	 */
	if (2 == argc && 0 == strcmp(argv[1], "success")) {
		// 说我行，我就行（可以试着注释掉下面的语句，看看会发生什么？）
		return 0;
	} else if (2 == argc && 0 == strcmp(argv[1], "failed")) {
		// 说不行，就不行
		return -1;
	} else {
		// 你到底几个意思？
		// 帮助提示：c表达方式
		printf("usage : %s success|failed\n", argv[0]);
		// 帮助提示：c++表达方式
		std::cout << "usage : " << argv[0] << " success|failed" << std::endl;
		return -2;
	}
}
